a = 1
typeof(a)
clear
b = [2, 3, 4]
b = 2
c = 3
a + b + c
d = a + b + c
age = [18, 21, 56]
help(lm)
vec1 = c(4, 5, 6, 7)
print(vec1)
vec1[2]
print(vec2)
getwd()
help("read.csv")
head(credit_data)
credit_data = read.csv("/Desktop/dataMining_rstudio/credit.csv", stringsAsFactors = TRUE)
head(credit_data)
head(credit_data)
credit_data = read.csv("credit.csv", stringsAsFactors = TRUE)
rm(list = ls()) # Removes all objects from environment
library(ggplot2)
library(GGally)
library(dplyr)
library(islr)
install.packages("ISLR")
rm(list = ls()) # Removes all objects from environment
library(ggplot2)
library(GGally)
library(dplyr)
library(islr)
attach(default)
attach(d)
plot(default, income)
Library(ISLR)
install.packages("ISLR")
Library(ISLR)
library(ISLR)
library(glmtoolbox)
d = default
library(ISLR)
library(glmtoolbox)
d = Default
attach(d)
plot(default, income)
plot(default, balance)
plot(student, balance)
M1 = glm(default~., data = d, family=binomial)
summary(M1)
hltest(M1)
attach(d)
plot(default, income)
plot(default, balance)
plot(student, balance)
M1 = glm(default~., data = d, family=binomial)
summary(M1)
M1 = glm(default~ income, data = d, family=binomial)
summary(M1)
M1 = glm(default~., data = d, family=binomial)
summary(M1)
M2 = glm(default~ income, data = d, family=binomial)
summary(M2)
hltest(M1)
hltest(M2)
library(ISLR)
library(glmtoolbox)
d = Default
attach(d)
plot(default, income)
plot(default, balance)
plot(student, balance)
# Graph for Default
M1 = glm(default~., data = d, family=binomial)
summary(M1)
hltest(M1)
# Graph for Income
M2 = glm(default~ income, data = d, family=binomial)
summary(M2)
hltest(M2)
# Graph for Income
M3 = glm(default~ balance, data = d, family=binomial)
summary(M3)
hltest(M3)
attach(d)
plot(default, income)
plot(default, balance)
install.packages("pROC")
library(ISLR)
library(glmtoolbox)
library(pROC)
d = Default
R = roc(default, mod.6_probs)
coords(R, "best", ret="threshold")
mod.6_pred[mod.6.probs>.321] = "yes"
tab2 = table(mod.6_pred, default)
mean(mod.6_pred!=default)
R
plot(R)
library(ISLR)
library(glmtoolbox)
library(pROC)
d = Default
attach(d)
plot(default, income)
plot(default, balance)
plot(student, balance)
# Graph for Default
M1 = glm(default~., data = d, family=binomial)
summary(M1)
hltest(M1)
# Graph for Income
M2 = glm(default~ income, data = d, family=binomial)
summary(M2)
hltest(M2)
# Graph for Income
M3 = glm(default~ balance, data = d, family=binomial)
summary(M3)
hltest(M3)
R = roc(default, mod.6_probs)
coords(R, "best", ret="threshold")
library(ISLR)
library(glmtoolbox)
library(pROC)
d = Default
attach(d)
plot(default, income)
plot(default, balance)
plot(student, balance)
# Graph for Default
M1 = glm(default~., data = d, family=binomial)
summary(M1)
hltest(M1)
# Graph for Income
M2 = glm(default~ income, data = d, family=binomial)
summary(M2)
hltest(M2)
# Graph for Income
M3 = glm(default~ balance, data = d, family=binomial)
summary(M3)
hltest(M3)
R = roc(default, mod.6_probs)
coords(R, "best", ret="threshold")
mod.6_pred[mod.6.probs>.321] = "yes"
tab2 = table(mod.6_pred, default)
R = roc(default, mod.6_probs)
coords(R, "best", ret="threshold")
mod.6_pred[mod.6.probs>.031] = "yes"
tab2 = table(mod.6_pred, default)
mean(mod.6_pred!=default)
plot(R)
M1= glm(default~., data = d, family = binomial)
summary(M1)
hltest(M1) #test the validity of model
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
d= Default
attach(d)
plot(default,income)
plot(default,balance)
plot(student,balance)
# plotting Generalized Linear Models using glm
m2= glm(default~ income, data = d, family = binomial)
summary(m2)
m3= glm(default~ balance, data = d, family = binomial)
summary(m3)
m4= glm(default~ student, data = d, family = binomial)
summary(m4)
mod4_probs=predict(m4,type = "response")
M1= glm(default~., data = d, family = binomial)
summary(M1)
hltest(M1) #test the validity of model
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
mod.6_probs=predict(mod.6,type = "response")
library(ISLR)
library(glmtoolbox)
d= Default
attach(d)
plot(default,income)
plot(default,balance)
plot(student,balance)
# plotting Generalized Linear Models using glm
m2= glm(default~ income, data = d, family = binomial)
summary(m2)
m3= glm(default~ balance, data = d, family = binomial)
summary(m3)
m4= glm(default~ student, data = d, family = binomial)
summary(m4)
mod4_probs=predict(m4,type = "response")
M1= glm(default~., data = d, family = binomial)
summary(M1)
hltest(M1) #test the validity of model
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
mod.6_probs=predict(mod.6,type = "response")
summary(mod.6_probs )
clear
exit
library(ISLR)
library(glmtoolbox)
d= Default
attach(d)
plot(default,income)
library(ISLR)
library(glmtoolbox)
d= Default
attach(d)
# Plots box-wisker plot to observer general trends
plot(default,income)
plot(default,balance)
plot(student,balance)
# plotting Generalized Linear Models using glm
m2= glm(default~ income, data = d, family = binomial)
summary(m2)
m3= glm(default~ balance, data = d, family = binomial)
summary(m3)
m4= glm(default~ student, data = d, family = binomial)
summary(m4)
mod4_probs=predict(m4,type = "response")
M1= glm(default~., data = d, family = binomial)
summary(M1)
summary(M1)
hltest(M1) #test the validity of model
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
mod.6_probs=predict(mod.6,type = "response")
summary(mod.6_probs )
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
mod.6_probs=predict(mod.6,type = "response")
summary(mod.6_probs)
contrasts(default)
mod.6_pred=rep("No",10000)#replicate function
mod.6_pred[mod.6_probs>.2]="Yes"
mod.6_pred
table(mod.6_pred,default) #to create table
mean(mod.6_pred!=default)
install.packages("pROC")
library(pROC)
R=roc(default,mod.6_probs)
coords(R,"best",ret="threshold")
mod.6_pred[mod.6_probs>.031]="Yes"
table(mod.6_pred,default)#to create table
mean(mod.6_pred!=default)
R
mod.6_pred[mod.6_probs>.031]="Yes"
table(mod.6_pred,default)#to create table
mean(mod.6_pred!=default)
plot(R)
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
mod.6_probs=predict(mod.6,type = "response")
summary(mod.6_probs)
contrasts(default)
mod.6_pred=rep("No",10000)#replicate function
mod.6_pred[mod.6_probs>.2]="Yes"
mod.6_pred
table(mod.6_pred,default) #to create table
mean(mod.6_pred!=default)
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
library(pROC)
R=roc(default,mod.6_probs)
install.packages("pROC")
install.packages("pROC")
library(pROC)
R=roc(default,mod.6_probs)
install.packages("pROC")
install.packages("pROC")
contrasts(default)
mod.6_pred=rep("No",10000)#replicate function
mod.6_pred[mod.6_probs>.2]="Yes"
library(ISLR)
library(glmtoolbox)
d = Default
attach(d)
# Plots box-wisker plot to observer general trends
plot(default,income)
plot(default,balance)
plot(student,balance)
# plotting Generalized Linear Models using glm
m2= glm(default~ income, data = d, family = binomial)
summary(m2)
m3= glm(default~ balance, data = d, family = binomial)
summary(m3)
m4= glm(default~ student, data = d, family = binomial)
summary(m4)
mod4_probs=predict(m4,type = "response")
#M Multiple Logistic Regression
M1= glm(default~., data = d, family = binomial)
summary(M1)
hltest(M1) #test the validity of model
#####################
mod.6=glm(default~balance+student+income,data = Default,family = binomial)
summary(mod.6)
mod.6_probs=predict(mod.6,type = "response")
summary(mod.6_probs)
contrasts(default)
mod.6_pred=rep("No",10000)#replicate function
mod.6_pred[mod.6_probs>.2]="Yes"
mod.6_pred
table(mod.6_pred,default) #to create table
mean(mod.6_pred!=default)
library(pROC)
R=roc(Default,mod.6_probs)
coords(R,"best",ret="threshold")
mean(mod.6_pred!=default) # Calculates the error rate
library(pROC)
R=roc(Default,mod.6_probs)
coords(R,"best",ret="threshold")
mod.6_pred[mod.6_probs>.031]="Yes"
table(mod.6_pred,Default)#to create table
mean(mod.6_pred!=Default)
plot(R)
library(pROC)
R=roc(Default,mod.6_probs)
coords(R,"best",ret="threshold")
mod.6_pred[mod.6_probs>.031]="Yes"
table(mod.6_pred,Default)#to create table
mean(mod.6_pred!=Default)
plot(R)
rm(list = ls()) # Removes all objects from environment
library(ggplot2)
library(GGally)
library(dplyr)
setwd("/Users/kunthshah/Desktop/archive/")
market_data <- read.csv("market2019FINAL.csv", header = TRUE, sep = ";")
# Converting data
market_data$guests <- as.numeric(market_data$guests)
market_data$month <- as.Date(paste(market_data$month, "-01", sep = ""), format = "%Y-%m-%d")
market_data$Hot.Tub <- as.logical(market_data$Hot.Tub)
market_data$Pool <- as.logical(market_data$Pool)
# Perform one-hot encoding for 'host_type'
market_data <- market_data %>%
mutate(
Professionals = as.integer(host_type == "Professionals"),
`2-5 Units` = as.integer(host_type == "2-5 Units")
) %>%
select(-host_type) # Remove the original 'host_type' column
str(market_data)
rm(list = ls()) # Removes all objects from environment
library(ggplot2)
library(GGally)
library(dplyr)
setwd("/Users/kunthshah/Desktop/archive/")
market_data <- read.csv("market2019FINAL.csv", header = TRUE, sep = ";")
# Converting data
market_data$guests <- as.numeric(market_data$guests)
market_data$month <- as.Date(paste(market_data$month, "-01", sep = ""), format = "%Y-%m-%d")
market_data$Hot.Tub <- as.logical(market_data$Hot.Tub)
market_data$Pool <- as.logical(market_data$Pool)
# Perform one-hot encoding for 'host_type'
market_data <- market_data %>%
mutate(
Professionals = as.integer(host_type == "Professionals"),
`2-5 Units` = as.integer(host_type == "2-5 Units")
) %>%
select(-host_type) # Remove the original 'host_type' column
str(market_data)
summary(market_data)
# Filter data for only '2 - 5 Units' host_type
Units25 <- market_data %>%
filter(`2-5 Units` == 1)
hist(log(Units25$revenue))
hist(Units25$revenue)
hist(log(Units25$revenue))
# Fit regression model
regr_mod <- lm(log(revenue) ~ bedrooms + bathrooms + guests + openness + occupancy + nightly.rate + lead.time + length.stay + Hot.Tub + Pool, data = Units25)
summary(regr_mod)
plot(regr_mod)
library(dplyr)
setwd("/Users/kunthshah/Desktop/archive/")
market_data <- read.csv("market2019FINAL.csv", header = TRUE, sep = ";")
# Converting data
market_data$guests <- as.numeric(market_data$guests)
market_data$month <- as.Date(paste(market_data$month, "-01", sep = ""), format = "%Y-%m-%d")
market_data$Hot.Tub <- as.logical(market_data$Hot.Tub)
market_data$Pool <- as.logical(market_data$Pool)
# Perform one-hot encoding for 'host_type'
market_data <- market_data %>%
mutate(
Professionals = as.integer(host_type == "Professionals"),
`2-5 Units` = as.integer(host_type == "2-5 Units"),
# `Single Owners` = as.integer(host_type == "Single Owners"),
) %>%
select(-host_type) # Remove the original 'host_type' column
str(market_data)
summary(market_data)
# Filter data for only 'Professional' host_type
professional_data <- market_data %>%
filter(Professionals == 1)
hist(log(professional_data$revenue))
# Fit regression model using winsorized revenue
regr_mod <- lm(log(professional_data$revenue)~ bedrooms + bathrooms + guests + openness + occupancy + nightly.rate + lead.time + length.stay + Hot.Tub, data = professional_data)
summary(regr_mod)
rm(list = ls()) # Removes all objects from environment
library(ggplot2)
library(GGally)
library(dplyr)
setwd("/Users/kunthshah/Desktop/archive/")
market_data <- read.csv("market2019FINAL.csv", header = TRUE, sep = ";")
# Converting data
market_data$guests <- as.numeric(market_data$guests)
market_data$month <- as.Date(paste(market_data$month, "-01", sep = ""), format = "%Y-%m-%d")
market_data$Hot.Tub <- as.logical(market_data$Hot.Tub)
market_data$Pool <- as.logical(market_data$Pool)
# Perform one-hot encoding for 'host_type'
market_data <- market_data %>%
mutate(
Professionals = as.integer(host_type == "Professionals"),
`Single Owners` = as.integer(host_type == "Single Owners")
) %>%
select(-host_type) # Remove the original 'host_type' column
str(market_data)
summary(market_data)
# Filter data for only 'Single Owners' host_type
singleOwners <- market_data %>%
filter(`Single Owners` == 1)
hist(log(singleOwners$revenue))
# Fit regression model
regr_mod <- lm(log(revenue) ~ bedrooms + bathrooms + guests + openness + occupancy + nightly.rate + lead.time + length.stay + Hot.Tub + Pool, data = singleOwners)
summary(regr_mod)
